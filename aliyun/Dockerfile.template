# Mall应用优化Dockerfile模板
# 基于多阶段构建，减小镜像体积并提高安全性

# 构建阶段
FROM maven:3.8.6-openjdk-8-slim AS builder

# 设置工作目录
WORKDIR /app

# 复制pom文件，利用Docker缓存
COPY pom.xml .
COPY */pom.xml ./

# 下载依赖（利用缓存层）
RUN mvn dependency:go-offline -B

# 复制源代码
COPY . .

# 编译应用
RUN mvn clean package -DskipTests -B

# 运行阶段
FROM openjdk:8-jre-alpine

# 安装必要的工具和字体
RUN apk add --no-cache \
    tzdata \
    curl \
    wget \
    bash \
    && ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \
    && echo "Asia/Shanghai" > /etc/timezone \
    && addgroup -g 1000 mall \
    && adduser -D -s /bin/bash -u 1000 -G mall mall

# 设置工作目录
WORKDIR /app

# 从构建阶段复制jar包
COPY --from=builder /app/target/*.jar app.jar

# 创建必要的目录
RUN mkdir -p /app/logs /app/temp /app/config \
    && chown -R mall:mall /app

# 切换到非root用户
USER mall

# 设置JVM参数
ENV JAVA_OPTS="-Xms512m -Xmx1024m -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:+UseContainerSupport" \
    SPRING_PROFILES_ACTIVE="prod" \
    SERVER_PORT="8080" \
    TZ="Asia/Shanghai"

# 暴露端口
EXPOSE 8080

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit 1

# 启动脚本
CMD ["sh", "-c", "java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -Dspring.profiles.active=$SPRING_PROFILES_ACTIVE -Dserver.port=$SERVER_PORT -jar app.jar"]

# 元数据标签
LABEL maintainer="mall-team" \
      version="1.0" \
      description="Mall application container" \
      org.opencontainers.image.source="https://github.com/your-org/mall"